###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# These effects are only used by the liberation mission type

fmerc_stage2_init_liberation = {
	log = "Liberation: Locating target planet."
	event_target:fmerc_buyer = {
		# Capital of buyer
		capital_scope = {
			closest_system = {
				limit = {
					NOT = { has_star_flag = enclave }
					any_planet = {
						exists = owner
						is_owned_by = event_target:fmerc_target_country
						is_controlled_by = event_target:fmerc_target_country
						fmerc_valid_liberation_planet = yes
					}
					# In some rare cases you end up with two empires
					# with colonized planets in the same system. These
					# can not be targetted. I'm not sure why I made it this way.
					NOT = {
						any_planet = {
							is_owned_by = event_target:fmerc_buyer
						}
					}
				}
				#min_steps = 1
				random_system_planet = {
					limit = {
						exists = owner
						is_owned_by = event_target:fmerc_target_country
						is_controlled_by = event_target:fmerc_target_country
						fmerc_valid_liberation_planet = yes
					}
					log = "Liberation: Target planet is [this.GetName] in [This.GetStarName]."
					set_planet_flag = "fmerc_target"
					save_event_target_as = fmerc_target
				}
			}
		}
	}
}

# THIS is the operations country
fmerc_liberation_set_target_planet = {
	if = {
		limit = { NOT = { exists = event_target:fmerc_target } }
		fmerc_set_target_country = yes
		event_target:fmerc_target_country = {
			random_owned_planet = {
				limit = { has_planet_flag = "fmerc_target" }
				save_event_target_as = fmerc_target
			}
		}
	}
}

#GARRISON_SIZE_BASE					= 2			# Planet always spawns this number of garrisons
#GARRISON_SIZE_MULT					= 0.4		# Per pop over 1

# Scope should be planet
# event_target:tmp_army_country gets the new armies
# ROOT needs to be the mercenary country
# event_target:fmerc_buyer must be set

fmerc_liberation_create_armies = {
	ROOT = {
		set_variable = {
			which = "MercLiberationArmyCount"
			value = 3 #GARRISON_SIZE_BASE + 1
		}
	}
	every_owned_pop = { # only loops the ones on planet
		ROOT = {
			# There is a chance this should be multiply_variable by 1.4
			# There is also a chance it should be multiply_variable by ( 1 + ( num_pops * 0.4 ) )
			# But it probably isn't, it's probably 0.4 armies per pop.
			change_variable = {
				which = "MercLiberationArmyCount"
				value = 0.4 # GARRISON_SIZE_MULT
			}
		}
	} # There are some army types we dont respond to, because I think they should give a defense advantage

	# Since switch{} on army_type does not properly trigger default{} for an
	# unmatched case, but _errors_ instead, we need to use an if-else-if block.
	# For fucks sake.
	# [21:44:59][trigger_impl.cpp:8524]: Error in army_type trigger, cannot find Army Type
	every_planet_army = {
		if = { limit = { army_type = assault_army } fmerc_assault_army = yes
		else = { if = { limit = { army_type = slave_army } fmerc_slave_army = yes
		else = { if = { limit = { army_type = clone_army } fmerc_clone_army = yes
		else = { if = { limit = { army_type = robotic_army } fmerc_robotic_army = yes
		else = { if = { limit = { army_type = robotic_defense_army } fmerc_robotic_defense_army = yes
		else = { if = { limit = { army_type = android_army } fmerc_android_army = yes
		else = { if = { limit = { army_type = android_defense_army } fmerc_android_defense_army = yes
		else = { if = { limit = { army_type = psionic_army } fmerc_psionic_army = yes
		else = { if = { limit = { army_type = xenomorph_army } fmerc_xenomorph_army = yes
		else = { if = { limit = { army_type = gene_warrior_army } fmerc_gene_warrior_army = yes
		else = { if = { limit = { army_type = swarm_army } fmerc_swarm_army = yes
		else = { if = { limit = { army_type = elite_guard_army } fmerc_elite_guard_army = yes
		else = { if = { limit = { army_type = shroud_army } fmerc_shroud_army = yes
		else = { if = { limit = { army_type = machine_assault_1 } fmerc_machine_assault_1 = yes
		else = { if = { limit = { army_type = machine_defense_1 } fmerc_machine_defense_1 = yes
		else = { if = { limit = { army_type = machine_assault_2 } fmerc_machine_assault_2 = yes
		else = { if = { limit = { army_type = machine_defense_2 } fmerc_machine_defense_2 = yes
		else = { if = { limit = { army_type = machine_assault_3 } fmerc_machine_assault_3 = yes
		else = {
			ROOT = {
				change_variable = {
					which = "MercLiberationArmyCount"
					value = 1
				}
			}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	}
	# Now we invade with the same number of armies that we found.
	ROOT = {
		set_variable = {
			which = "MercLiberationArmyAdditional"
			value = "MercSuccess"
		}
		while = { # ye I could use divide_variable. I wasn't thinking straight
			limit = {
				check_variable = {
					which = "MercLiberationArmyAdditional"
					value > 20
				}
			}
			change_variable = {
				which = "MercLiberationArmyCount"
				value = 1
			}
			subtract_variable = {
				which = "MercLiberationArmyAdditional"
				value = 20
			}
		}
		log = "Spawning [Root.MercLiberationArmyCount] armies."
		while = {
			limit = {
				check_variable = {
					which = "MercLiberationArmyCount"
					value > 0.9
				}
			}
			PREV = { # Planet
				create_army = {
					name = "Hired Rebels"
					owner = event_target:tmp_army_country
					species = event_target:fmerc_buyer
					type = "defense_army"
				}
			}
			subtract_variable = {
				which = "MercLiberationArmyCount"
				value = 1
			}
		}
	}
}

fmerc_assault_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "assault_army"
		}
	}
}
fmerc_slave_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "slave_army"
		}
	}
}
fmerc_clone_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "clone_army"
		}
	}
}
fmerc_robotic_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "robotic_army"
		}
	}
}
fmerc_robotic_defense_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "robotic_defense_army"
		}
	}
}
fmerc_android_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "android_army"
		}
	}
}
fmerc_android_defense_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "android_defense_army"
		}
	}
}
fmerc_psionic_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "psionic_army"
		}
	}
}
fmerc_xenomorph_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "xenomorph_army"
		}
	}
}
fmerc_gene_warrior_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "gene_warrior_army"
		}
	}
}
fmerc_swarm_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "swarm_army"
		}
	}
}
fmerc_elite_guard_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "elite_guard_army"
		}
	}
}
fmerc_shroud_army = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "shroud_army"
		}
	}
}
fmerc_machine_assault_1 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "machine_assault_1"
		}
	}
}
fmerc_machine_defense_1 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "machine_defense_1"
		}
	}
}
fmerc_machine_assault_2 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "machine_assault_2"
		}
	}
}
fmerc_machine_defense_2 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "machine_defense_2"
		}
	}
}
fmerc_machine_assault_3 = {
	PREV = { # Planet
		create_army = {
			name = "Hired Rebels"
			owner = event_target:tmp_army_country
			species = event_target:fmerc_buyer
			type = "machine_assault_3"
		}
	}
}
