###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###



# STAGE 3
# - Operation is ongoing
# - ROOT/THIS can be anything, depending on the effect
# - Effects can be used by any operation

fmerc_stage3_update_can_retry = {
	subtract_variable = {
		which = "MercSuccess"
		value = 25
	}
	remove_country_flag = "fmerc_retry_mission"
	if = { limit = { check_variable = { which = "MercSuccess" value > 90 } }
		random = { chance = 95 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 80 } }
		random = { chance = 85 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 70 } }
		random = { chance = 75 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 60 } }
		random = { chance = 65 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 50 } }
		random = { chance = 55 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 40 } }
		random = { chance = 45 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 30 } }
		random = { chance = 35 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 20 } }
		random = { chance = 25 set_country_flag = "fmerc_retry_mission" }
	else = { if = { limit = { check_variable = { which = "MercSuccess" value > 10 } }
		random = { chance = 15 set_country_flag = "fmerc_retry_mission" }
	} } } } } } } } } } } } } } } } }
}

fmerc_stage3_spawn_fixed_corvette = {
	last_created_fleet = {
		create_ship = {
			name = random
			design = "Mercenary Corvette"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_corvette = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "corvette"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_destroyer = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "destroyer"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_cruiser = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "cruiser"
			prefix = no
		}
	}
}
fmerc_stage3_spawn_battleship = {
	last_created_fleet = {
		create_ship = {
			name = random
			random_existing_design = "battleship"
			prefix = no
		}
	}
}

fmerc_stage3_configure_squadrons = {
	# 4 corvettes to every destroyer
	set_variable = { which = "DestroyerSquad" value = "DestroyerPower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }
	change_variable = { which = "DestroyerSquad" value = "CorvettePower" }

	# 2 destroyers to every cruiser
	set_variable = { which = "CruiserSquad" value = "CruiserPower" }
	change_variable = { which = "CruiserSquad" value = "DestroyerSquad" }
	change_variable = { which = "CruiserSquad" value = "DestroyerSquad" }

	# 4 cruisers to every battleship
	set_variable = { which = "BattleshipSquad" value = "BattleshipPower" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
	change_variable = { which = "BattleshipSquad" value = "CruiserSquad" }
}

merc_stage3_spawn_random_design_fleet = {
	# There is probably a valid Corvette design available, which means we
	# almost assume that all designs are valid. Still, we don't spawn a
	# squadron whose total is zero and fall back to corvettes.
	while = {
		# Spawn if value is greater than zero, so that we never create
		# a _smaller_ fleet than the one we wanted, but maybe slightly bigger.
		limit = { check_variable = { which = "MercSpawn" value > 0 } }
		if = { limit = {
				check_variable = { which = "MercSpawn" value > "BattleshipSquad" }
				# Make sure there is a valid battleship design
				check_variable = { which = "BattleshipPower" value > 0 }
			}
			while = { count = 32 fmerc_stage3_spawn_corvette = yes }
			while = { count = 8 fmerc_stage3_spawn_destroyer = yes }
			while = { count = 4 fmerc_stage3_spawn_cruiser = yes }
			fmerc_stage3_spawn_battleship = yes
			subtract_variable = { which = "MercSpawn" value = "BattleshipSquad" }
		else = { if = { limit = {
				check_variable = { which = "MercSpawn" value > "CruiserSquad" }
				# Make sure there is a valid cruiser design
				check_variable = { which = "CruiserPower" value > 0 }
			}
			while = { count = 8 fmerc_stage3_spawn_corvette = yes }
			while = { count = 2 fmerc_stage3_spawn_destroyer = yes }
			fmerc_stage3_spawn_cruiser = yes
			subtract_variable = { which = "MercSpawn" value = "CruiserSquad" }
		else = { if = { limit = {
				check_variable = { which = "MercSpawn" value > "DestroyerSquad" }
				# Make sure there is a valid Destroyer design
				check_variable = { which = "DestroyerPower" value > 0 }
			}
			while = { count = 4 fmerc_stage3_spawn_corvette = yes }
			fmerc_stage3_spawn_destroyer = yes
			subtract_variable = { which = "MercSpawn" value = "DestroyerSquad" }
		else = {
			fmerc_stage3_spawn_corvette = yes
			subtract_variable = { which = "MercSpawn" value = "CorvettePower" }
		} } } } } }
	}
}

# There's no valid Corvette design, as far as we can see.
# This means the user has addons installed that monkeywrench the
# Stellaris autodesigner. This is exceptionally easy to do. They
# should really fix that piece of shit autodesigner to properly
# regard size/class restrictions on all components.
merc_stage3_spawn_predesigned_fleet = {

	while = {
		limit = { check_variable = { which = "MercSpawn" value > 0 } }
		fmerc_stage3_spawn_fixed_corvette = yes
		subtract_variable = { which = "MercSpawn" value = 50 }
	}
}

# While loops only loop to 100.
fmerc_stage3_match_fleet_power = {
	fmerc_stage3_configure_squadrons = yes
	log = "Final fleet power: [this.MercSpawn]."
	log = "Squadron requirements: B=[this.BattleshipSquad] C=[this.CruiserSquad] D=[this.DestroyerSquad] C=[this.Corvette]"

	if = { limit = { check_variable = { which = "CorvettePower" value = 0 } }
		log = "MERCOPS ERROR: No valid Corvette design in operations country."
		merc_stage3_spawn_predesigned_fleet = yes
	else = {
		merc_stage3_spawn_random_design_fleet = yes
	} }
}

# THIS is the operations country
# requires event_target:fmerc_target_country
merc_find_best_harbour = {
	# First try to find something close to any existing operations fleet
	if = { limit = { count_owned_ships { count > 0 } }
		# ZZZ so apparently, at least for countries without a capital,
		# ZZZ random_owned_fleet actually scopes to something even if
		# ZZZ no actual fleets exist ingame
		random_owned_fleet = {
			closest_system = {
				limit = { merc_has_station = yes }
				random_fleet_in_system = {
					limit = { merc_is_station = yes }
					save_event_target_as = fmerc_spawn_at
				}
			}
		}
	}
	if = { limit = { NOT = { exists = event_target:fmerc_target_country } }
		fmerc_set_target_country = yes
	}

	# The target country might not always exist; we might have destroyed it
	if = { limit = { exists = event_target:fmerc_target_country }
		# Then try to find a location inside the targets borders
		if = { limit = { NOT = { exists = event_target:fmerc_spawn_at } }
			event_target:fmerc_target_country = {
				random_system_within_border = {
					limit = { merc_has_station = yes }
					random_fleet_in_system = {
						limit = { merc_is_station = yes }
						save_event_target_as = fmerc_spawn_at
					}
				}
			}
		}
		# If we still found nothing, find one of our targets and get
		# the closest location to the target
		if = { limit = { NOT = { exists = event_target:fmerc_spawn_at } }
			event_target:fmerc_target_country = {
				random_owned_ship = {
					limit = { has_ship_flag = "fmerc_target" }
					closest_system = {
						limit = { merc_has_station = yes }
						random_fleet_in_system = {
							limit = { merc_is_station = yes }
							save_event_target_as = fmerc_spawn_at
						}
					}
				}
			}
		}
	}

	# Fall back to any station owned by an enclave
	if = { limit = { NOT = { exists = event_target:fmerc_spawn_at } }
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			random_owned_fleet = {
				limit = { merc_is_station = yes }
				save_event_target_as = fmerc_spawn_at
			}
		}
	}
	if = {
		limit = { NOT = { exists = event_target:fmerc_spawn_at } }
		log = "Stage 3: Unable to find spawn location, aborting mission."
		set_country_flag = "fmerc_ops_completed"
		break = yes
	}
}

fmerc_stage3_create_fleet = {
	# Make sure we have somewhere to spawn
	merc_find_best_harbour = yes

	log = "Creating new fleet in [fmerc_spawn_at.GetStarName]."

	# For when we recreate the fleet
	set_faction_hostility = { set_hostile = no }
	create_fleet = {
		effect = {
			set_owner = ROOT
			set_location = {
				target = event_target:fmerc_spawn_at
				distance = 40
				angle = random
			}
			set_fleet_stance = passive
			set_aggro_range_measure_from = self
			set_aggro_range = 80
			set_fleet_flag = "fmerc_count_towards_success"
		}
	}

	if = {
		limit = {
			exists = event_target:fmerc_target_country
			NOT = { event_target:fmerc_target_country = { is_country_type = "default" } }
		}
		# Be much more aggressive towards non-default countries.
		# ZZZ I have no idea why I did this.
		set_variable = { which = "MercSpawn" value = 4500 }
		else = {
			set_variable = { which = "MercSpawn" value = 1500 }
		}
	}
	if = {
		limit = { has_country_flag = "merc_op_liberation" }
		# 1.5k extra fleet power.
		# I don't want to add more right now, because it's not going to
		# scale well in any meaningful way. I need to do a more indepth
		# examination of the target country, see how many military fleets
		# and how large they are before I can more easily determine
		# what our "success chance" is.
		change_variable = { which = "MercSpawn" value = 1500 }
	}
	log = "Base fleet power is [this.MercSpawn]."

	# Add MercSpawn per opinion level with merc hq
	fmerc_set_buyer = yes
	if = {
		limit = { exists = event_target:fmerc_buyer }
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			if = { limit = { trust = { who = event_target:fmerc_buyer value = 100 } }
				PREV = { change_variable = { which = "MercSpawn" value = 1000 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 90 } }
				PREV = { change_variable = { which = "MercSpawn" value = 900 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 80 } }
				PREV = { change_variable = { which = "MercSpawn" value = 800 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 70 } }
				PREV = { change_variable = { which = "MercSpawn" value = 700 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 60 } }
				PREV = { change_variable = { which = "MercSpawn" value = 600 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 50 } }
				PREV = { change_variable = { which = "MercSpawn" value = 500 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 40 } }
				PREV = { change_variable = { which = "MercSpawn" value = 400 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 30 } }
				PREV = { change_variable = { which = "MercSpawn" value = 300 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 20 } }
				PREV = { change_variable = { which = "MercSpawn" value = 200 } }
			else = { if = { limit = { trust = { who = event_target:fmerc_buyer value > 10 } }
				PREV = { change_variable = { which = "MercSpawn" value = 100 } }
			}}}}}}}}}}}}}}}}}}}
		}
	}
	log = "Adjusted for trust level: [this.MercSpawn]."

	# Adjust for success chance before we match target fleets
	# So we only adjust the "base" + trust values.
	set_variable = { which = "MercPercentSuccess" value = "MercSuccess" }
	divide_variable = { which = "MercPercentSuccess" value = 100 }
	multiply_variable = { which = "MercSpawn" value = "MercPercentSuccess" }
	log = "Base adjusted for success (x[this.MercPercentSuccess]): [this.MercSpawn]."

	# We need to spawn _something_ no matter what. The player bought a service.
	if = {
		limit = { check_variable = { which = "MercSpawn" value < "CorvettePower" } }
		change_variable = { which = "MercSpawn" value = "CorvettePower" }
		change_variable = { which = "MercSpawn" value = "CorvettePower" }
		log = "Adjusted minimum: [this.MercSpawn]."
	}
	while = {
		limit = { check_variable = { which = "MercSpawn" value < "CorvettePower" } }
		change_variable = { which = "MercSpawn" value = 200 }
		log = "Adjusted absolute minimum: [this.MercSpawn]."
	}

	# fmerc_target is always a planet or fleet
	event_target:fmerc_target = {
		solar_system = {
			every_fleet_in_system = {
				limit = {
					exists = owner
					owner = {
						OR = {
							is_overlord_to = event_target:fmerc_target_country
							is_same_value = event_target:fmerc_target_country
							AND = {
								has_federation = yes
								is_in_federation_with = event_target:fmerc_target_country
							}
						}
					}
				}
				merc_shameful_get_fleet_power = yes
				log = "Matching fleet [this.GetName]: [root.MercSpawn]."
			}
		}
	}

	fmerc_stage3_match_fleet_power = yes
}
