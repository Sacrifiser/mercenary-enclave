###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###


# The AI has a habit of splitting and merging fleets 24/7.
# At least they did in 1.4.x and earlier. That's mainly why we mark targets like this.
merc_tag_ships = {
	if = {
		limit = {
			exists = event_target:merc_current_target
			# XXX is there a way of checking if merc_current_target is a planet
			# XXX except any_owned_planet = { is_same_value } ?
		}
		event_target:merc_current_target = {
			if = { limit = { exists = fleet }
				fleet = { # every_owned_ship doesnt' work in fleet scope, this tags max 100x
					log = "Tag: Tagging all ships in [this.GetName]."
					while = { limit = { any_owned_ship = { NOT = { has_ship_flag = "merc_target" } } }
						random_owned_ship = {
							limit = { NOT = { has_ship_flag = "merc_target" } }
							PREVPREVPREV = { change_variable = { which = "MercTargetCount" value = 0.7 } }
							set_ship_flag = "merc_target"
						}
					}
				}
			else = {
				log = "Fleet scope did not exist in target. Possibly a planet then?"
			} }
		}
		else = { # No target exists, so simply GTFO
			log = "Tag: merc_current_target doesn't exist, aborting operation."
			merc_stage4_abort_operation = yes
		}
	}
}

merc_found_target = {
	log = "merc_found_target: Subtracting -1 counts."
	PREVPREV = { set_country_flag = "merc_found_target" }
}

merc_set_next_target = {
	log = "merc_set_next_target"
	merc_set_country = yes

	remove_country_flag = "merc_found_target"

	# Dont subtract for these ones
	event_target:merc_country = {
		if = { limit = { any_owned_planet = { has_planet_flag = "merc_target" } }
			random_owned_planet = {
				limit = { has_planet_flag = "merc_target" }
				PREVPREV = { set_country_flag = "merc_found_target" }
				save_event_target_as = merc_current_target
			}
			else = {
				if = { limit = { any_owned_ship = { has_ship_flag = "merc_target" } }
					random_owned_ship = {
						limit = { has_ship_flag = "merc_target" }
						PREVPREV = { set_country_flag = "merc_found_target" }
						save_event_target_as = merc_current_target
					}
				}
			}
		}
	}

	if = { limit = { NOT = { has_country_flag = "merc_found_target" } }
		switch = {
			trigger = has_country_flag
			merc_op_spaceport  = { merc_set_target_spaceport = yes }
			merc_op_liberate = { merc_set_target_liberate = yes }
			merc_op_civilian   = { merc_set_target_civilian = yes }
			merc_op_fleet      = { merc_set_target_military = yes }
			merc_op_clear      = { merc_set_target_clear = yes }
		}
	}

	if = { limit = { NOT = { has_country_flag = "merc_found_target" } }
		log = "Could not find a valid target for operation, aborting."
		merc_stage4_abort_operation = yes
		break = yes
	}

	merc_tag_ships = yes
}
