###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###

namespace = mercOpsLiberation

# STAGE 3 CONTROLLER
# These events are used exclusively by the "Liberation" operation.
#

# liberate
# Triggered from fmerc_init_stage2
country_event = {
	id = mercOpsLiberation.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = "fmerc_ops_completed" }
	}

	immediate = {
		log = "mercOpsLiberation: Start mission (.1)"
		if = {
			limit = {
				exists = event_target:fmerc_target
			}

			if = {
				limit = { count_owned_ships { count = 0 } }
				fmerc_stage3_create_fleet = yes
			}

			every_owned_fleet = {
				queue_actions = {
					move_to = event_target:fmerc_target.solar_system
					wait = 14
					repeat = {
						while = {
							id = mercOpsLiberation.1.trigger.1
							NOT = { is_fleet_idle = yes }
							exists = event_target:fmerc_target
							exists = owner
							NOT = { owner = { has_country_flag = "fmerc_ops_completed" } }
							NOR = {
								exists = solar_system
								solar_system = {
									is_same_value = event_target:fmerc_target.solar_system
								}
							}
						}
						wait = 14
					}
					effect = {
						id = mercOpsLiberation.1.effect.1
						set_fleet_stance = aggressive
						if = {
							limit = {
								exists = event_target:fmerc_target
								event_target:fmerc_target = { owner = { NOT = { is_hostile = ROOT } } }
							}
							owner = {
								# Turn hostile when we find our first target,
								# unless they are already hostile towards us.
								set_faction_hostility = { set_hostile = yes }
							}
						}
					}
					orbit_planet = event_target:fmerc_target
					repeat = {
						while = {
							id = mercOpsLiberation.1.trigger.2
							exists = event_target:fmerc_target
							exists = owner
							NOT = { exists = orbit }
							NOT = { owner = { has_country_flag = "fmerc_ops_completed" } }
						}
						wait = 4
					}
					effect = {
						id = mercOpsLiberation.1.effect.2
						owner = {
							country_event = {
								id = mercOpsLiberation.10
							}
						}
					}
				}
			}
			else = {
				log = "Liberation target did not exist, aborting mission."
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}

country_event = {
	id = mercOpsLiberation.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "mercOpsLiberation: Checking if we should try again ..."
		fmerc_stage3_update_can_retry = yes
		if = {
			limit = {
				has_country_flag = "fmerc_retry_mission"
			}
			remove_country_flag = "fmerc_retry_mission"
			log = "Success chance is [this.MercSuccess]%, and the RNG was in our favor."
			fmerc_liberation_set_target_planet = yes
			country_event = {
				id = mercOpsLiberation.1
			}
			else = {
				log = "Liberation mission aborted due to low success factor ([this.MercSuccess])."
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}

# Triggered after our bombardment fleet is in orbit
# This might trigger again while the rebel country still exists
# If a merc fleet is destroyed after reaching orbit, and there's
# enough MercSuccess value left, a new fleet will be sent.
country_event = {
	id = mercOpsLiberation.10
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "mercOpsLiberation: queue_actions done (.10)"
		fmerc_liberation_set_target_planet = yes

		if = {
			limit = {
				# We only check this because the event might have been
				# triggered even when the fleet was dead?
				# I'm not sure if queue_actions abort or not.

				# We can't check for orbit, because the fleet drifts
				# for some reason. It did not do this pre-1.8.
				any_owned_fleet = {
					exists = solar_system
					solar_system = {
						any_planet = {
							is_same_value = event_target:fmerc_target
						}
					}
				}
			}
			log = "We have a fleet in the system of target planet."

			fmerc_set_buyer = yes
			if = {
				limit = {
					any_country = {
						has_relation_flag = {
							flag = fmerc_liberation_rebels
							who = ROOT
						}
					}
				}
				# ZZZ I don't think this will ever happen.
				log = "And we found an existing rebel country, so creating new armies."
				# The rebel country exists, so create more armies
				random_country = {
					limit = {
						has_relation_flag = {
							flag = fmerc_liberation_rebels
							who = ROOT
						}
					}
					save_event_target_as = tmp_army_country
				}
				event_target:fmerc_target = {
					while = {
						count = 20
						random = {
							chance = 80
							create_army = {
								name = "Hired Rebels"
								owner = event_target:tmp_army_country
								species = event_target:fmerc_buyer
								type = "defense_army"
							}
						}
					}
				}
				else = {
					log = "There was no existing rebel country, creating new one."
					fmerc_set_target_country = yes

					# The rebel country does NOT exist, so create a new one
					event_target:fmerc_target = {
						create_rebels = {
							name = random
							ethos = event_target:fmerc_buyer
							authority = event_target:fmerc_buyer
							civics = random
							species = event_target:fmerc_target_country
							name_list = event_target:fmerc_target_country
							flag = random
							effect = {
								set_country_flag = "fmerc_liberation_rebels"
								# This is weird; it seems that when the rebels win,
								# this country is immediately turned into a "default" one,
								# and so anyone that had contact with them is notified by
								# vanilla event action.61. Try to prevent that.
								set_country_flag = "silence_destroy_event"
								# ZZZ
								# event target only for create_army below.
								# I don't know if last_created_country works with
								# create_rebels, and I don't want to run it even once
								# to find out.
								save_event_target_as = tmp_army_country
								establish_communications_no_message = ROOT # merc operations
								establish_communications_no_message = event_target:fmerc_target_country
								set_relation_flag = {
									flag = fmerc_liberation_rebels
									who = ROOT
								}
								set_relation_flag = {
									flag = fmerc_liberation_rebels
									who = event_target:fmerc_buyer
								}
							}
						}
						fmerc_liberation_create_armies = yes
					}
				}
			}
		}
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# on_fleet_destroyed_victim
country_event = {
	id = mercOpsLiberation.30
	hide_window = yes
	is_triggered_only = yes

	# Our operations fleet has been destroyed.
	trigger = {
		is_country_type = "fmerc_operations"
		has_country_flag = "merc_op_liberation"
		NOT = { has_country_flag = "fmerc_ops_completed" }
		FROMFROM = { has_fleet_flag = "fmerc_count_towards_success" }
		count_owned_ships = { count = 0 }
	}

	immediate = {
		log = "mercOpsLiberation: on_fleet_destroyed_victim (.30)"
		country_event = { id = mercOpsLiberation.2 }
	}
}

# on_planet_defenders_win
# Triggers country_event for the defender upon victory
# Root = country, planet owner (merc target)
# From = country, attack leader (rebel)
# FromFrom = planet
country_event = {
	id = mercOpsLiberation.50
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		FROMFROM = {
			has_planet_flag = "fmerc_target"
			controller = { is_same_value = ROOT }
		}
	}
	immediate = {
		log = "mercOpsLiberation: on_planet_defenders_win (.50)"
		random_country = {
			limit = {
				is_country_type = "fmerc_operations"
				reverse_has_relation_flag = {
					flag = fmerc_liberation_rebels
					who = FROM
				}
			}
			country_event = { id = mercOpsLiberation.2 }
		}
	}
}

# on_planet_defenders_lose
# Triggers country_event for the defender upon defeat
# This = country, planet owner (merc target)
# From = country, attack leader (rebel)
# FromFrom = planet
country_event = {
	id = mercOpsLiberation.60
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = { is_country_type = "rebel" }
		FROMFROM = {
			has_planet_flag = "fmerc_target"
			exists = leader
		}
	}
	immediate = {
		log = "mercOpsLiberation: on_planet_defenders_lose (.60)"
		# In vanilla, the leader was killed.
		# But now that there's only one governor per sector,
		# that sounds unreasonable to me.
		FROMFROM = {
			leader = { unassign_leader = THIS }
		}
	}
}

# on_rebels_take_planet
# Initial rebels manage to take control of the planet, happens before the new owner is set, after the war is created.
# This = Rebel Country
# From = Planet
country_event = {
	id = mercOpsLiberation.70
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_country_flag = "fmerc_liberation_rebels"
	}
	immediate = {
		log = "mercOpsLiberation: on_rebels_take_planet (.70)"
		FROM.owner = {
			# Event target used in 4211
			save_event_target_as = rebelled_against
			# This vanilla event can be used directly
			country_event = { id = unrest.4211 }
		}
	}
}

# on_rebels_take_planet_owner_switched
# This = Rebel Country
# From = Planet
# FromFrom = War
country_event = {
	id = mercOpsLiberation.71
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_country_flag = "fmerc_liberation_rebels"
	}
	immediate = {
		log = "mercOpsLiberation: on_rebels_take_planet_owner_switched (.71)"

		# Find mercenary operations
		random_country = {
			limit = {
				is_country_type = "fmerc_operations"
				reverse_has_relation_flag = {
					flag = fmerc_liberation_rebels
					who = ROOT
				}
			}
			log = "Liberation mission complete!"
			set_country_flag = "fmerc_ops_completed"
			random_country = {
				limit = {
					reverse_has_relation_flag = {
						who = PREV
						flag = merc_operations_target
					}
				}
				save_event_target_as = fmerc_target_country
			}
		}
		random_country = {
			limit = {
				reverse_has_relation_flag = {
					flag = fmerc_liberation_rebels
					who = ROOT
				}
			}
			save_event_target_as = fmerc_buyer
		}

		# Clean the slate as much as possible
		FROM = { destroy_colony = { keep_buildings = yes } }
		destroy_country = yes

		# And re-start colony
		FROM = { planet_event = { id = mercOpsLiberation.1335 } }
	}
}

# No matter what I do, it seems I am unable to prevent the spam of errors like
# [21:02:22][trigger.cpp:466]: Script Error, Checking trigger against an unsupported scope!
# Event: mercOpsLiberation.1335
# Location:  file: common/species_rights/species_rights.txt line: 2202
# Trigger Type: has_citizenship_type

# I've tried everything I can think of;
# - NOT creating a new country, but simply set_country_type = default on the
#   rebel country, but this does not change all the "Rebels from XYZ" strings
#   that show ingame to instead show "Independent" (or whatever the normal one)
# - Never creating a rebel country and simply using a default for invasion.
#   This presents a whole slew of problems on its own.
# - Copying the species from the rebel country
# - Copying the species from the target country
# - Copying the species from any country
# - create_country in country or planet scope
# - create_species in an existing species scope:
#   random_owned_pop = { owner_species = { create_species = { } } }
# - create_species in a pop scope
# - create_species in a planet scope, country scope
#
# If anyone reads this and thinks of something I haven't tried, please tell me.
# The above list, plus some other tests I did, is the main reason this
# shitshow is separated into three events now (.71 + 1335 + 1336).
# It could really all be one event, or scripted effect.

planet_event = {
	id = mercOpsLiberation.1335
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		# Notice how we don't use the released_by_country and
		# released_from_country properties. That's because they do two things
		# (probably among other things) that we want to prevent:
		# - Prevents the standard diplomacy screen that comes with a new
		#   contact. We especially want this on the buyer end.
		#   I could have faked this, of course.
		# - Copies the techs from released_from_country. We don't want to do
		#   this unless the new country was released from a default country
		#   type. And I am considering testing tech_unlocked_ratio to perhaps
		#   adjust the new countries tech level in more detail.

		if = {
			limit = {
				exists = event_target:fmerc_target_country
				event_target:fmerc_target_country = {
					NOT = { has_authority = auth_hive_mind }
				}
			}
			event_target:fmerc_target_country = {
				random_owned_pop = {
					limit = {
						is_same_species = event_target:fmerc_target_country
						is_robot_pop = no
						NOT = { has_trait = trait_cybernetic }
						NOT = { has_trait = trait_latent_psionic }
						NOT = { has_trait = trait_psionic }
						NOT = { has_trait = trait_self_modified }
					}
					log = "Creating copy of target countries main species."
					species = {
						ROOT = { set_planet_flag = "merc_got_species" }
						create_species = {
							name = this
							plural = this
							class = this
							portrait = this
							traits = this
							homeworld = ROOT
						}
					}
				}
			}
		}
		if = { limit = { NOT = { has_planet_flag = "merc_got_species" } }
			log = "Creating random new species."
			create_species = {
				name = random
				class = random_non_machine
				portrait = random
				traits = random
				allow_negative_traits = no
				extra_trait_points = 3
				homeworld = ROOT
			}
		}
		remove_planet_flag = "merc_got_species"

		# Determine ethos template
		if = {
			limit = { event_target:fmerc_buyer = { has_ethic = ethic_gestalt_consciousness } }
				random_country = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					save_event_target_as = ethosTemplate
				}
			else = {
				event_target:fmerc_buyer = { save_event_target_as = ethosTemplate }
			}
		}

		create_country = {
			name = random
			type = default
			species = last_created_species
			ethos = event_target:ethosTemplate
			authority = random
			civics = random
			flag = random
			day_zero_contact = no
			effect = {
				modify_species = {
					species = this
					ideal_planet_class = ROOT
				}
				change_dominant_species = { species = last_created }
			}
		}
		set_owner = last_created_country
		set_controller = last_created_country
		create_colony = {
			owner = last_created_country
			species = owner_main_species
			ethos = owner
		}
		set_capital = yes
		last_created_country = { country_event = { id = mercOpsLiberation.1336 } }
	}
}

# Just so we get our own root scope here, it's just more clean.
country_event = {
	id = mercOpsLiberation.1336
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_country_flag = "day_0"
		# lulz liberationD, no point in fixing that
		set_country_flag = "merc_op_liberationd_await_clear_skies"
		add_modifier = {
			modifier = "recently_liberated"
			days = 3600
		}

		if = {
			limit = {
				OR = {
					NOT = { exists = event_target:fmerc_target_country }
					NOT = { event_target:fmerc_target_country = { is_country_type = default } }
				}
			}
			log = "Copying techs from operation buyer."
			copy_techs_from = { # error.log whines if we dont exclude something
				target = event_target:fmerc_buyer
				except = { tech_akx_worm_1 tech_akx_worm_2 tech_akx_worm_3 }
			}
		else = {
			log = "Copying techs from operation target."
			copy_techs_from = {
				target = event_target:fmerc_target_country
				except = { tech_akx_worm_1 tech_akx_worm_2 tech_akx_worm_3 }
			}
		} }

		add_minerals = 3000
		add_energy = 5000
		add_influence = 500
		add_food = 50
		add_100_unity_per_year_passed = yes

		create_leader = {
			type = ruler
			species = ROOT
			name = random
			skill = 200
		}
		assign_leader = last_created_leader
		create_leader = {
			type = governor
			species = ROOT
			name = random
			skill = 200
			traits = {
				trait = random_trait
				trait = random_trait
			}
		}

		establish_contact = { who = event_target:fmerc_buyer location = capital_scope }
		if = {
			limit = { exists = event_target:fmerc_target_country }
			establish_contact = { who = event_target:fmerc_target_country location = capital_scope }
		}
		# Setting and removing this flag before and after `establish_contact`,
		# respectively, prevents the action.10 event from showing ('we have encountered')
		# yet still allows the introduction diplomatic screen.
		# Doing it in any other order seems to either produce or prevent both.
		remove_country_flag = "day_0"

		establish_communications = event_target:fmerc_buyer
		if = {
			limit = { exists = event_target:fmerc_target_country }
			establish_communications = event_target:fmerc_target_country
			add_opinion_modifier = {
				who = event_target:fmerc_target_country
				modifier = opinion_broke_away_from
			}
			event_target:fmerc_target_country = {
				add_opinion_modifier = {
					who = ROOT
					modifier = opinion_broke_away
				}
			}
			if = {
				limit = { ROOT = { has_opinion_modifier = { who = event_target:fmerc_target_country modifier = opinion_new_contact } } }
				ROOT = { remove_opinion_modifier = { who = event_target:fmerc_target_country modifier = opinion_new_contact } }
			}
		}
		add_opinion_modifier = {
			who = event_target:fmerc_buyer
			modifier = opinion_liberated_us
		}
		event_target:fmerc_buyer = {
			add_opinion_modifier = {
				who = ROOT
				modifier = opinion_we_liberated
			}
		}
		if = {
			limit = { has_opinion_modifier = { who = event_target:fmerc_buyer modifier = opinion_new_contact } }
			remove_opinion_modifier = { who = event_target:fmerc_buyer modifier = opinion_new_contact }
		}

		capital_scope = {
			planet_event = { id = game_start.13 } # replace some buildings for special empires
			planet_event = { id = game_start.21 } # upgrade colony shelter
			planet_event = { id = game_start.22 } # set up additional buildings (mines, farms, power plants)
			planet_event = { id = game_start.14 } # replace some tile blockers for special empires

			# destroy_colony removed all the pops, probably.
			best_tile_for_pop = { create_pop = { species = ROOT ethos = ROOT } }
			best_tile_for_pop = { create_pop = { species = ROOT ethos = ROOT } }
			best_tile_for_pop = { create_pop = { species = ROOT ethos = ROOT } }
			best_tile_for_pop = { create_pop = { species = ROOT ethos = ROOT } }
			best_tile_for_pop = { create_pop = { species = ROOT ethos = ROOT } }
		}
	}
}

event = {
	id = mercOpsLiberation.1337
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_country = { has_country_flag = "merc_op_liberationd_await_clear_skies" }
	}

	immediate = {
		every_country = {
			limit = { has_country_flag = "merc_op_liberationd_await_clear_skies" }
			country_event = { id = mercOpsLiberation.1338 }
		}
	}
}


country_event = {
	id = mercOpsLiberation.1338
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = "merc_op_liberationd_await_clear_skies"
		exists = capital_scope
		capital_scope = {
			solar_system = {
				NOT = {
					any_ship_in_system = {
						exists = owner
						owner = {
							NOT = { is_same_value = ROOT }
						}
					}
				}
			}
		}
	}

	immediate = {
		log = "mercOpsLiberation: Solar system empty (.1337)"
		remove_country_flag = "merc_op_liberationd_await_clear_skies"
		country_event = { id = game_start.9 } # Empire init - add ships
		create_fleet_from_naval_cap = 0.5
	}
}
