###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###

namespace = mercOpsMeta

# Triggered from mission setup effects, after the delay
country_event = {
	id = mercOpsMeta.1
	hide_window = yes
	is_triggered_only = yes

	# We should start the mission immediately, the delay has passed.
	immediate = {
		fmerc_init_stage2 = yes
	}
}

event = {
	id = mercOpsMeta.100
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_country = {
			limit = {
				is_country_type = "fmerc_operations"
				OR = {
					has_country_flag = "fmerc_ops_completed"
					NOT = {
						has_country_flag = "fmerc_ops_timeout"
					}
				}
			}
			country_event = { id = mercOpsMeta.911 }
		}
	}
}

# The mercenary operations are complete!
country_event = {
	id = mercOpsMeta.911
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "mercOpsMeta.911: Terminating mission."

		fmerc_set_buyer = yes
		fmerc_set_target_country = yes
		if = {
			limit = {
				exists = event_target:fmerc_target_country
				event_target:fmerc_target_country = {
					has_country_flag = "fmerc_operations_target"
				}
			}
			log = "Clearing fmerc_target flags from [fmerc_target_country.GetName]'s ships and/or planets, if any."
			event_target:fmerc_target_country = {
				remove_country_flag = "fmerc_operations_target"
				every_owned_ship = {
					limit = { has_ship_flag = "fmerc_target" }
					remove_ship_flag = "fmerc_target"
				}
				every_owned_planet = {
					limit = { has_planet_flag = "fmerc_target" }
					remove_planet_flag = "fmerc_target"
				}
			}
		}

		# If we were doing a clear operation, calculate the cost
		if = {
			limit = {
				exists = event_target:fmerc_buyer
				NOT = { has_country_flag = "fmerc_calculated_costs" }
				OR = {
					has_country_flag = "fmerc_amoeba"
					has_country_flag = "fmerc_cloud"
					has_country_flag = "fmerc_crystal"
					has_country_flag = "fmerc_pirate"
					has_country_flag = "fmerc_drone"
				}
			}
			set_country_flag = "fmerc_calculated_costs"
			if = {
				limit = {
					exists = event_target:fmerc_target_country
					num_killed_ships = {
						target = event_target:fmerc_target_country
						value > 4
					}
				}
				event_target:fmerc_buyer = {
					set_variable = {
						which = "MercCost"
						value = 3000
					}
				}
				else = { if = {
				limit = {
					exists = event_target:fmerc_target_country
					num_killed_ships = {
						target = event_target:fmerc_target_country
						value > 3
					}
				}
				event_target:fmerc_buyer = {
					set_variable = {
						which = "MercCost"
						value = 2400
					}
				}
				else = { if = {
				limit = {
					exists = event_target:fmerc_target_country
					num_killed_ships = {
						target = event_target:fmerc_target_country
						value > 2
					}
				}
				event_target:fmerc_buyer = {
					set_variable = {
						which = "MercCost"
						value = 1800
					}
				}
				else = { if = {
				limit = {
					exists = event_target:fmerc_target_country
					num_killed_ships = {
						target = event_target:fmerc_target_country
						value > 1
					}
				}
				event_target:fmerc_buyer = {
					set_variable = {
						which = "MercCost"
						value = 1200
					}
				}
				else = { if = {
				limit = {
					exists = event_target:fmerc_target_country
					num_killed_ships = {
						target = event_target:fmerc_target_country
						value > 0
					}
				}
				event_target:fmerc_buyer = {
					set_variable = {
						which = "MercCost"
						value = 600
					}
				}
				else = {
					event_target:fmerc_buyer = {
						set_variable = {
							which = "MercCost"
							value = 300
						}
					}
				}
			} } } } } } } } }
			event_target:fmerc_buyer = {
				log = "Clear: Calculated cost is [this.MercCost]."
				merc_account_update = yes
				merc_account_grabdatcash = yes
			}
		}

		fmerc_stage3_ensure_spawn_location = yes

		if = {
			limit = {
				count_owned_ships { count > 0 }
				exists = event_target:fmerc_spawn_at
			}
			log = "Returning mercenary operations fleet to enclave."
			set_faction_hostility = { set_hostile = no }
			every_owned_fleet = {
				queue_actions = {
					repeat = {
						while = {
							id = mercOpsFleet.911.trigger.1
							NOR = {
								exists = solar_system
								solar_system = {
									is_same_value = event_target:fmerc_spawn_at.solar_system
								}
							}
						}
						move_to = event_target:fmerc_spawn_at.solar_system
						wait = 7
					}
					move_to = event_target:fmerc_spawn_at
					wait = 14
					effect = {
						id = mercOpsFleet.911.effect.1
						remove_fleet_flag = "fmerc_count_towards_success"
						destroy_fleet = THIS
					}
				}
			}
			else = {
				log = "Mercenary operation complete, destroying operation country and resetting buyer."
				event_target:fmerc_buyer = {
					remove_country_flag = "fmerc_active_operation"
					remove_country_flag = "fmerc_calculated_costs"
					country_event = {
						id = mercMenu.9004
					}
				}

				merc_check_detection = yes
				destroy_country = yes
			}
		}
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
country_event = {
	id = mercOpsMeta.200
	hide_window = yes
	is_triggered_only = yes
	trigger = { is_country_type = fmerc_operations }

	immediate = {
		change_variable = { which = "MercKillsTotal" value = 1 }
		FROMFROMFROM = {
			switch = {
				trigger = is_ship_class
				shipclass_outpost_station = { ROOT = { change_variable = { which = "MercKillsFrontier" value = 1 } } } # Frontier Outpost
				shipclass_observation_station = { ROOT = { change_variable = { which = "MercKillsObs" value = 1 } } }
				shipclass_wormhole_station = { ROOT = { change_variable = { which = "MercKillsWormhole" value = 1 } } }
				shipclass_research_station = { ROOT = { change_variable = { which = "MercKillsResearch" value = 1 } } }
				shipclass_mining_station = { ROOT = { change_variable = { which = "MercKillsMining" value = 1 } } }
				shipclass_orbital_station = { ROOT = { change_variable = { which = "MercKillsSpaceport" value = 1 } } }
				shipclass_military_station = { ROOT = { change_variable = { which = "MercKillsStations" value = 1 } } }
				shipclass_military = { ROOT = { change_variable = { which = "MercKillsShips" value = 1 } } }
				default = {
					ROOT = { change_variable = { which = "MercKillsShips" value = 1 } }
				}
			}
		}
	}
}
