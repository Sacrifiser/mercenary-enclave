namespace = fmerc_ops_liberate

# liberate
# Triggered from fmerc_ops_initial_target
country_event = {
	id = fmerc_ops_liberate.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = "fmerc_ops_completed" }
	}

	immediate = {
		log = "Liberation mission start."
		if = {
			limit = {
				exists = event_target:fmerc_target_country
				exists = event_target:fmerc_target
			}
			if = {
				limit = {
					exists = event_target:fmerc_ops_fleet
					event_target:fmerc_ops_fleet = {
						fleet_size < 4
					}
				}
				log = "Fleet is too small, destroying."
				event_target:fmerc_ops_fleet = {
					destroy_fleet = this
				}
			}

			if = {
				limit = {
					NOT = {
						any_owned_fleet = {
							has_fleet_flag = "fmerc_raiding_fleet"
						}
					}
				}
				log = "We need a new fleet."
				fmerc_ops_set_spawn_location = yes
				fmerc_ops_create_fleet = yes
			}

			event_target:fmerc_ops_fleet = {
				queue_actions = {
					repeat = {
						while = {
							id = fmerc_ops_liberate.1.trigger.1
							exists = event_target:fmerc_target
							exists = owner
							NOT = { owner = { has_country_flag = "fmerc_ops_completed" } }
							NOR = {
								exists = solar_system
								solar_system = {
									any_planet = {
										exists = owner
										owner = {
											is_same_value = event_target:fmerc_target_country
										}
										has_planet_flag = "fmerc_target"
									}
								}
							}
						}
						move_to = event_target:fmerc_target.solar_system
						wait = 4
					}
					effect = {
						id = fmerc_ops_liberate.1.effect.1
						set_fleet_stance = aggressive
						owner = {
							# Turn hostile when we find our first target
							set_faction_hostility = { set_hostile = yes }
						}
					}
					repeat = {
						while = {
							id = fmerc_ops_liberate.1.trigger.2
							exists = event_target:fmerc_target
							NOT = { exists = orbit }
							NOT = { owner = { has_country_flag = "fmerc_ops_completed" } }
						}
						orbit_planet = event_target:fmerc_target
						wait = 4
					}
					effect = {
						id = fmerc_ops_liberate.1.effect.2
						owner = {
							country_event = {
								id = fmerc_ops_liberate.10
							}
						}
					}
				}
			}
			else = {
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}

# Triggered after our bombardment fleet is in orbit
# This might trigger again while the rebel country still exists
# If a merc fleet is destroyed after reaching orbit, and there's
# enough MercSuccess value left, a new fleet will be sent.
country_event = {
	id = fmerc_ops_liberate.10
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		log = "fmerc_ops_liberate.10"
		fmerc_ops_ensure_all_liberate_targets = yes
		if = {
			limit = {
				# We only check this because the event might have been
				# triggered even when the fleet was dead?
				# I'm not sure if queue_actions abort or not.

				# We can't check for orbit, because the fleet drifts
				# for some reason. It did not do this pre-1.8.
				exists = event_target:fmerc_ops_fleet
				event_target:fmerc_ops_fleet = {
					exists = solar_system
					solar_system = {
						any_planet = {
							is_same_value = event_target:fmerc_target
						}
					}
				}
			}
			log = "We have a fleet in the system of target planet."
			if = {
				limit = {
					any_country = {
						has_relation_flag = {
							flag = fmerc_liberation_rebels
							who = root
						}
					}
				}
				# XXX I don't think this will ever happen.
				log = "And we found an existing rebel country, so creating new armies."
				# The rebel country exists, so create more armies
				random_country = {
					limit = {
						has_relation_flag = {
							flag = fmerc_liberation_rebels
							who = root
						}
					}
					save_event_target_as = tmp_army_country
				}
				event_target:fmerc_target = {
					while = {
						count = 20
						random = {
							chance = 80
							create_army = {
								name = "Hired Rebels"
								owner = event_target:tmp_army_country
								species = event_target:fmerc_buyer
								type = "defense_army"
							}
						}
					}
				}
				else = {
					log = "There was no existing rebel country, creating new one."
					# The rebel country does NOT exist, so create a new one
					event_target:fmerc_target = {
						create_rebels = {
							name = random
							ethos = event_target:fmerc_buyer
							authority = event_target:fmerc_buyer
							civics = random
							species = event_target:fmerc_target_country
							flag = random
							effect = {
								set_country_flag = "fmerc_liberation_rebels"
								# XXX
								# event target only for create_army below.
								# I don't know if last_created_country works with
								# create_rebels, and I don't want to run it even once
								# to find out.
								save_event_target_as = tmp_army_country
								establish_communications_no_message = root # merc operations
								establish_communications_no_message = event_target:fmerc_target_country
								#establish_communications_no_message = event_target:fmerc_buyer
								#event_target:fmerc_target_country = {
								#	every_relation = {
								#		establish_communications_no_message = prevprev
								#	}
								#}
								set_relation_flag = {
									flag = fmerc_liberation_rebels
									who = root
								}
								set_relation_flag = {
									flag = fmerc_liberation_rebels
									who = event_target:fmerc_buyer
								}
							}
						}
						fmerc_liberation_create_armies = yes
					}
				}
			}
		}
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# on_fleet_destroyed_victim
country_event = {
	id = fmerc_ops_liberate.30
	hide_window = yes
	is_triggered_only = yes

	# Our operations fleet has been destroyed.
	trigger = {
		is_country_type = "fmerc_operations"
		has_country_flag = "fmerc_liberate"
	}

	immediate = {
		log = "fmerc_ops_liberate.30"
		subtract_variable = {
			which = MercSuccess
			value = 25
		}
		if = {
			limit = {
				check_variable = {
					which = MercSuccess
					value > 10
				}
			}
			# Try again
			log = "Restart mission."
			fmerc_ops_ensure_all_liberate_targets = yes
			country_event = {
				id = fmerc_ops_liberate.1
			}
			# We failed
			else = {
				log = "Mission failed."
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}

# XXX run unrest.4235 when the operation is over?

# 17. ------------------------------
# 18. - Printing the current scopes (trigger) -
# 19. - This: Klaggian Conclave
# 20. - Root: Klaggian Conclave
# 21. - Prev: Klaggian Conclave
# 22. - PrevPrev: Klaggian Conclave
# 23. - PrevPrevPrev: Klaggian Conclave
# 24. - PrevPrevPrevPrev: Klaggian Conclave
# 25. - From: Sacrosanct Klaggian Council
# 26. - FromFrom: Cranodeth
# 27. - FromFromFrom: Cranodeth
# 28. - FromFromFromFrom: Cranodeth
# 29. - This's Solar System:
# 30. - This's Planet: Klaggian Conclave
# 31. - This's Sector: Klaggian Conclave
# 32. - Root's Solar System:
# 33. - Root's Owner's Name: Klaggian Conclave
# 34. - Root's Owner's Capital's Name: Lyrogg
# 35. ------------------------------
# on_planet_defenders_win
# Triggers country_event for the defender upon victory
# Root = country, planet owner (merc target)
# From = country, attack leader (rebel)
# FromFrom = planet
country_event = {
	id = fmerc_ops_liberate.50
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_country_type = default
		FromFrom = {
			has_planet_flag = "fmerc_target"
			controller = { is_same_value = root }
		}
	}
	immediate = {
		log = "fmerc_ops_liberate.50"
		random_country = {
			limit = {
				is_country_type = fmerc_operations
				reverse_has_relation_flag = {
					flag = fmerc_liberation_rebels
					who = from
				}
			}
			log = "Checking if we should try again..."
			country_event = {
				id = fmerc_ops_liberate.30
			}
		}
	}
}


# [16:58:56] 17. ------------------------------
# [16:58:56] 18. - Printing the current scopes (trigger) -
# [16:58:56] 19. - This: Klaggian Conclave
# [16:58:56] 20. - Root: Klaggian Conclave
# [16:58:56] 21. - Prev: Klaggian Conclave
# [16:58:56] 22. - PrevPrev: Klaggian Conclave
# [16:58:56] 23. - PrevPrevPrev: Klaggian Conclave
# [16:58:56] 24. - PrevPrevPrevPrev: Klaggian Conclave
# [16:58:56] 25. - From: Klaggian Assembly of Suns
# [16:58:56] 26. - FromFrom: Cranodeth
# [16:58:56] 27. - FromFromFrom: Cranodeth
# [16:58:56] 28. - FromFromFromFrom: Cranodeth
# [16:58:56] 29. - This's Solar System:
# [16:58:56] 30. - This's Planet: Klaggian Conclave
# [16:58:56] 31. - This's Sector: Klaggian Conclave
# [16:58:56] 32. - Root's Solar System:
# [16:58:56] 33. - Root's Owner's Name: Klaggian Conclave
# [16:58:56] 34. - Root's Owner's Capital's Name: Lyrogg
# [16:58:56] 35. ------------------------------
# on_planet_defenders_lose
# Triggers country_event for the defender upon defeat
# This = country, planet owner (merc target)
# From = country, attack leader (rebel)
# FromFrom = planet
country_event = {
	id = fmerc_ops_liberate.60
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = { is_country_type = rebel }
		FROMFROM = {
			has_planet_flag = fmerc_target
			exists = leader
		}
	}
	immediate = {
		# In vanilla, the leader was killed.
		# But now that there's only one governor per sector,
		# that sounds unreasonable to me.
		FROMFROM = {
			leader = { unassign_leader = this }
		}
	}
}

# [16:58:56]17. ------------------------------
# [16:58:56]18. - Printing the current scopes (trigger) -
# [16:58:56]19. - This: Klaggian Assembly of Suns
# [16:58:56]20. - Root: Klaggian Assembly of Suns
# [16:58:56]21. - Prev: Klaggian Assembly of Suns
# [16:58:56]22. - PrevPrev: Klaggian Assembly of Suns
# [16:58:56]23. - PrevPrevPrev: Klaggian Assembly of Suns
# [16:58:56]24. - PrevPrevPrevPrev: Klaggian Assembly of Suns
# [16:58:56]25. - From: Cranodeth
# [16:58:56]26. - FromFrom: Cranodeth
# [16:58:56]27. - FromFromFrom: Cranodeth
# [16:58:56]28. - FromFromFromFrom: Cranodeth
# [16:58:56]29. - This's Solar System:
# [16:58:56]30. - This's Planet: Klaggian Assembly of Suns
# [16:58:56]31. - This's Sector: Klaggian Assembly of Suns
# [16:58:56]32. - Root's Solar System:
# [16:58:56]33. - Root's Owner's Name: Klaggian Assembly of Suns
# [16:58:56]34. - Root's Owner's Capital's Name: Cranodeth
# [16:58:56]35. ------------------------------
# on_rebels_take_planet
# Initial rebels manage to take control of the planet, happens before the new owner is set, after the war is created.
# This = Rebel Country
# From = Planet
country_event = {
	id = fmerc_ops_liberate.70
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_country_flag = "fmerc_liberation_rebels"
	}
	immediate = {
		log = "fmerc_ops_liberate.70"
		from.owner = {
			# Event target used in 4211
			save_event_target_as = rebelled_against
			# This vanilla event can be used directly
			country_event = { id = unrest.4211 }
		}
	}
}

# on_rebels_take_planet_owner_switched
# This = Rebel Country
# From = Planet
# FromFrom = War
country_event = {
	id = fmerc_ops_liberate.71
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_country_flag = "fmerc_liberation_rebels"
	}
	immediate = {
		log = "fmerc_ops_liberate.71"

		# Find mercenary operations
		random_country = {
			limit = {
				is_country_type = fmerc_operations
				reverse_has_relation_flag = {
					flag = fmerc_liberation_rebels
					who = ROOT
				}
			}
			log = "Notifying merc operations that we are done."
			set_country_flag = "fmerc_ops_completed"
			save_event_target_as = fmerc_operations
		}

		random_country = {
			limit = {
				is_country_type = default
				reverse_has_relation_flag = {
					flag = fmerc_liberation_rebels
					who = ROOT
				}
			}
			log = "Found buyer."
			save_event_target_as = fmerc_buyer
		}

		random_country = {
			limit = {
				reverse_has_relation_flag = {
					who = event_target:fmerc_operations
					flag = merc_operations_target
				}
			}
			log = "Found target country."
			save_event_target_as = fmerc_target_country
		}

		FROM = {
			# Planet scope
			create_country = {
				name = random
				ethos = event_target:fmerc_buyer
				authority = event_target:fmerc_buyer
				civics = random
				released_by_country = event_target:fmerc_buyer
				released_from_country = event_target:fmerc_target_country
				species = ROOT.owner_species
				flag = random
				type = default
				day_zero_contact = no
				effect = {
					set_country_flag = "fmerc_liberated_await_clear_skies"
					set_timed_country_flag = { flag = timed_liberated_country days = 1 }
					establish_communications_no_message = event_target:fmerc_buyer
					establish_contact = { who = event_target:fmerc_buyer location = FROM }
					if = {
						limit = { exists = event_target:fmerc_target_country }
						establish_communications_no_message = event_target:fmerc_target_country
						establish_contact = { who = event_target:fmerc_target_country location = FROM }
					}
					add_modifier = {
						modifier = "recently_liberated"
						days = 7200
					}
					save_event_target_as = merc_newcountry
				}
			}
			set_owner = event_target:merc_newcountry
			set_controller = event_target:merc_newcountry
			set_capital = yes
		}

		destroy_country = yes

		event_target:merc_newcountry = {
			add_minerals = 2000
			add_energy = 2000
			add_influence = 250
			add_food = 50
			create_leader = {
				type = ruler
				species = owner_main_species
				name = random
				skill = 200
				traits = {}
			}
			assign_leader = last_created_leader
			ruler = {
				add_random_leader_trait = yes
			}
			create_leader = {
				type = governor
				species = owner_main_species
				name = random
				skill = 200
				traits = {
					trait = random_trait
					trait = random_trait
				}
			}
		}
		FROM = {
			planet_event = { id = game_start.13 } # replace some buildings for special empires
			planet_event = { id = game_start.21 } # upgrade colony shelter
			planet_event = { id = game_start.22 } # set up additional buildings (mines, farms, power plants)
			planet_event = { id = game_start.14 } # replace some tile blockers for special empires
		}
	}
}


country_event = {
	id = fmerc_ops_liberate.1337
	hide_window = yes

	trigger = {
		has_country_flag = "fmerc_liberated_await_clear_skies"
		capital_scope = {
			solar_system = {
				NOT = {
					any_ship_in_system = {
						exists = owner
						owner = {
							NOT = { is_same_value = ROOT }
						}
					}
				}
			}
		}
	}

	immediate = {
		remove_country_flag = "fmerc_liberated_await_clear_skies"
		country_event = { id = game_start.9 } # Empire init - add ships
		create_fleet_from_naval_cap = 0.5
	}
}
