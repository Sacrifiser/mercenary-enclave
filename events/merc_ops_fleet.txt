###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###

namespace = mercOpsFleet

# STAGE 3 CONTROLLER
# These events are used for all operation types except "Liberation".
#

# Triggered from fmerc_init_stage2
# In this, event_target:fmerc_target is a fleet
country_event = {
	id = mercOpsFleet.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = "fmerc_ops_completed" }
	}

	immediate = {
		log = "mercOpsFleet: Start mission (.1)"

		if = {
			limit = {
				exists = event_target:fmerc_target
			}

			if = {
				limit = { count_owned_ships { count = 0 } }
				log = "Attempting to spawn new fleet."
				fmerc_stage3_create_fleet = yes
			}

			every_owned_fleet = {
				queue_actions = {
					repeat = {
						while = {
							id = mercOpsFleet.1.trigger.1
							exists = event_target:fmerc_target
							exists = owner
							NOT = {
								owner = { has_country_flag = "fmerc_ops_completed" }
							}
							OR = {
								NOT = { exists = solar_system }
								NOT = {
									solar_system = {
										any_ship_in_system = {
											exists = fleet
											fleet = {
												is_same_value = event_target:fmerc_target
											}
										}
									}
								}
							}
						}
						move_to = event_target:fmerc_target.solar_system
						wait = 7
					}
					effect = {
						id = mercOpsFleet.1.effect.1
						set_fleet_stance = aggressive
						owner = {
							# Turn hostile when we find our first target
							# XXX maybe dont need this if our target is already hostile to us
							set_faction_hostility = { set_hostile = yes }
						}
					}
					repeat = {
						while = {
							id = mercOpsFleet.1.trigger.2
							exists = event_target:fmerc_target
							exists = owner
							NOT = {
								owner = { has_country_flag = "fmerc_ops_completed" }
							}
						}
						move_to = event_target:fmerc_target
						wait = 3
					}
					effect = {
						id = mercOpsFleet.1.effect.2
						owner = {
							country_event = { id = mercOpsFleet.10 }
						}
					}
				}
			}

			else = {
				log = "Fleet target did not exist, aborting mission."
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}

# Exclusively triggered by the fleet queue being completed
country_event = {
	id = mercOpsFleet.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = "fmerc_ops_completed" }
	}

	immediate = {
		log = "mercOpsFleet: queue_actions done (.10)"

		# This sets fmerc_target to the next ship target, if needed.
		fmerc_set_raid_target = yes

		if = {
			limit = {
				exists = event_target:fmerc_target
			}
			# Try again
			country_event = {
				id = mercOpsFleet.1
			}
			else = {
				log = "Fleet target did not exist, aborting mission."
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# on_fleet_destroyed_victim
country_event = {
	id = mercOpsFleet.30
	hide_window = yes
	is_triggered_only = yes

	# Our operations fleet has been destroyed.
	trigger = {
		is_country_type = "fmerc_operations"
		NOT = { has_country_flag = "merc_op_liberation" }
		NOT = { has_country_flag = "fmerc_ops_completed" }
		FROMFROM = { has_fleet_flag = "fmerc_count_towards_success" }
		count_owned_ships = { count = 0 }
	}

	immediate = {
		log = "mercOpsFleet: on_fleet_destroyed_victim (.30)"

		# This sets fmerc_target to the next ship target, if needed.
		fmerc_set_raid_target = yes

		if = {
			limit = {
				exists = event_target:fmerc_target
			}

			fmerc_stage3_update_can_retry = yes
			if = {
				limit = {
					has_country_flag = "fmerc_retry_mission"
				}
				remove_country_flag = "fmerc_retry_mission"
				log = "Success chance is [this.MercSuccess]%, and the RNG was in our favor."
				country_event = {
					id = mercOpsFleet.1
				}
				else = {
					log = "Fleet operation cancelled due to low success factor ([this.MercSuccess])."
					set_country_flag = "fmerc_ops_completed"
				}
			}
			else = {
				log = "Fleet target did not exist, aborting mission."
				set_country_flag = "fmerc_ops_completed"
			}
		}
	}
}
