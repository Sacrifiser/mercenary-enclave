###
# This file is part of a project hosted at https://github.com/stellaris-mods
# Copyright (c) 2017 folk@folk.wtf
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
###

namespace = mercguardian

# The events in this file are copied mostly from vanilla.
# The idea was to use the vanilla communication system for this enclave, but of course
# they coded it in such a way that's not possible
# So I copied it instead.

# ZZZ Try not renaming event targets, they might be used in localisations

@tier1influencecontact = 7
@tier1influencecontactxenophile = 8
@tier1influencecontactmin = 20
@tier1influencecontactmax = 80

@tier2influencecontact = 10
@tier2influencecontactxenophile = 12
@tier2influencecontactmin = 40
@tier2influencecontactmax = 100

# Special operations fleet enters a solar system that is owned by a default
# country that does not have communications with a merc enclave
# on_entering_system_fleet
fleet_event = {
	id = mercguardian.90
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_fleet_flag = "fmerc_count_towards_success"
		owner = { is_country_type = "fmerc_operations" }
		FROM = {
			exists = space_owner
			space_owner = {
				is_ai = no
				exists = capital_scope
				any_country = {
					is_country_type = "fmerc_enclave"
					NOR = {
						has_communications = PREV
						reverse_has_relation_flag = {
							flag = ongoing_merc_enclave_investigation
							who = PREV
						}
					}
				}
			}
		}
	}

	immediate = {
		random_country = {
			limit = { is_country_type = "fmerc_enclave" }
			save_event_target_as = target_enclave
			# Scope to HQ fleet and set that system as the target for the project
			random_owned_fleet = {
				limit = { has_fleet_flag = "folk_mercenary_station" }
				solar_system = {
					save_event_target_as = fmercsystem
				}
			}
		}
		FROM = {
			space_owner = {
				country_event = { id = mercguardian.91 }
			}
		}
	}
}

# A default country fleet enters a system where the mercenary enclave
# has a station, and they have not established communications.
# Allow the trigger to run anywhere, to catch
# mercenary outposts as well as the HQ
# on_entering_system_fleet
fleet_event = {
	id = mercguardian.96
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		owner = {
			is_ai = no
			exists = capital_scope
		}
		FROM = {
			any_ship_in_system = {
				exists = owner
				owner = {
					is_country_type = "fmerc_enclave"
					NOR = {
						has_communications = ROOT.owner
						reverse_has_relation_flag = {
							flag = ongoing_merc_enclave_investigation
							who = ROOT.owner
						}
					}
				}
			}
		}
	}

	immediate = {
		owner = {
			FROM = {
				random_fleet_in_system = {
					limit = {
						exists = owner
						owner = { is_country_type = "fmerc_enclave" }
					}
					owner = {
						save_event_target_as = target_enclave
						# Scope to random owned fleet in case the default
						# country stumbled across a random merc enclave installation
						random_owned_fleet = {
							limit = { has_fleet_flag = "folk_mercenary_station" }
							solar_system = {
								save_event_target_as = fmercsystem
							}
						}
					}
				}
			}
			country_event = { id = mercguardian.91 }
		}
	}
}

# Chained from both on_entering_system_fleet events above
country_event = {
	id = mercguardian.91
	title = fmerc_enclave.precom_title
	desc = fmerc_enclave.precom_desc
	picture = GFX_evt_star_chart
	location = FROM # FROM is fleet
	is_triggered_only = yes

	immediate = {
		set_relation_flag = {
			flag = ongoing_merc_enclave_investigation
			who = event_target:target_enclave
		}
		country_event = { id = mercguardian.98 days = 300 random = 600 }
	}

	option = {
		name = INTERESTING
		# Project needs to be created in the enclaves country scope, so that FROMFROM points
		# to the enclave in the special project event handlers
		event_target:target_enclave = {
			enable_special_project = {
				name = "INVESTIGATE_MERC_ENCLAVE"
				location = ROOT.capital_scope
				owner = ROOT
			}
		}
	}
}

# Enclaves make contact, delayed
country_event = {
	id = mercguardian.98
	title = guardian.98.name
	desc = guardian.98.desc
	picture = GFX_evt_throne_room
	show_sound = event_radio_chatter
	is_triggered_only = yes

	trigger = {
		any_country = {
			is_country_type = "fmerc_enclave"
			NOT = { has_communications = ROOT }
		}
	}

	immediate = {
		random_country = {
			limit = {
				is_country_type = "fmerc_enclave"
				NOT = { has_communications = ROOT }
			}
			ROOT = { establish_communications_no_message = PREV }
		}
	}

	after = {
		if = {
			limit = {
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
			add_monthly_resource_mult = {
				resource = influence
				value = @tier1influencecontactxenophile
				min = @tier1influencecontactmin
				max = @tier1influencecontactmax
			}
			else = {
				add_monthly_resource_mult = {
					resource = influence
					value = @tier1influencecontact
					min = @tier1influencecontactmin
					max = @tier1influencecontactmax
				}
			}
		}
		hidden_effect = {
			FROM = { country_event = { id = mercguardian.101 } }
		}
	}

	option = { name = "guardian.98.a" }
}

# Communication Established, triggered by special project
country_event = {
	id = mercguardian.99
	title = "guardian.99.name"
	desc = guardian.99.desc
	picture = GFX_evt_throne_room
	show_sound = event_radio_chatter
	is_triggered_only = yes

	immediate = { establish_communications_no_message = FROMFROM }

	after = {
		if = {
			limit = {
				OR = {
					has_ethic = ethic_xenophile
					has_ethic = ethic_fanatic_xenophile
				}
			}
			add_monthly_resource_mult = {
				resource = influence
				value = @tier2influencecontactxenophile
				min = @tier2influencecontactmin
				max = @tier2influencecontactmax
			}
			else = {
				add_monthly_resource_mult = {
					resource = influence
					value = @tier2influencecontact
					min = @tier2influencecontactmin
					max = @tier2influencecontactmax
				}
			}
		}
		hidden_effect = {
			FROMFROM = { country_event = { id = mercguardian.101 } }
		}
	}

	option = { name = "guardian.98.a" }
}

# Triggered after special project completion or forced introduction
# This is just really so that the FROM scope in .102 can be the enclave,
# because it's used in the vanilla l10n strings
country_event = {
	id = mercguardian.101
	hide_window = yes
	is_triggered_only = yes
	immediate = { FROM = { country_event = { id = mercguardian.102 } } }
}
country_event = {
	id = mercguardian.102
	title = guardian.102.name
	desc = fmerc.introduction.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_trader_window"
	custom_gui_option = "enclave_trader_option"

	picture_event_data = {
		portrait = FROM
		room = enclave_trader_room
	}

	option = { name = guardian.502.a }
}

# on_ship_destroyed_victim
country_event = {
	id = mercguardian.140
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_country_type = "fmerc_enclave" }
	immediate = {
		FROMFROM = {
			solar_system = { save_event_target_as = trader_system }
		}
		FROM = {
			country_event = { id = mercguardian.141 }
			save_event_target_as = trader_destroyer
		}
		# If we have zero fleets left, we are dead, so notify customers
		if = {
			limit = { count_owned_ships { count = 0 } }
			set_global_flag = "folk_mercenary_destroyed"
			every_country = {
				limit = {
					has_communications = ROOT
					NOT = { is_country = event_target:trader_destroyer }
				}
				country_event = { id = mercguardian.142 }
			}
		}
	}
}

# XXX
# ROOT attacked and killed _one_ mercenary enclave ship. Surely this must
# be a mistake. It should be if we destroyed a FLEET maybe?
country_event = {
	id = mercguardian.141
	title = "guardian.141"
	desc = "guardian.141.desc"
	picture = GFX_evt_space_debris
	location = event_target:trader_system
	show_sound = event_ship_bridge
	is_triggered_only = yes

	immediate = { set_country_flag = "fmerc_has_destroyed_ship" }
	option = {
		name = EXCELLENT
		add_minerals = 8000
		add_energy = 8000
		# XXX get back some of the deposit
	}
}

# Mercenary Destroyed
# Notification for everyone who had contact with the enclave except attacker
country_event = {
	id = mercguardian.142
	title = "guardian.141"
	desc = {
		text = fmerc_enclave.a.desc
		trigger = {
			NOT = {
				has_relation_flag = {
					who = FROM
					flag = fmercenary_trade
				}
			}
		}
	}
	desc = {
		text = fmerc_enclave.c.desc
		trigger = {
			has_relation_flag = {
				who = FROM
				flag = fmercenary_trade
			}
		}
	}
	picture = GFX_evt_exploding_ship
	location = event_target:trader_system
	show_sound = event_ship_explosion
	is_triggered_only = yes

	immediate = {
		add_opinion_modifier = {
			who = event_target:trader_destroyer
			modifier = opinion_destroyed_mercenary
		}
	}

	option = { name = "fmerc_enclave.a" }
}

# on_entering_battle
country_event = {
	id = mercguardian.155
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = "default"
		FROM = { is_country_type = "fmerc_enclave" }
	}

	immediate = {
		FROM = {
			save_event_target_as = traders
			add_trust = {
				who = ROOT
				amount = -100
			}
		}
		set_country_flag = "attacked_folk_mercenaries"
		if = {
			limit = {
				has_relation_flag = {
					who = FROM
					flag = fmercenary_trade
				}
			}
			remove_relation_flag = {
				who = FROM
				flag = fmercenary_trade
			}
			country_event = { id = guardian.156 }
		}
	}
}

# Attacked Mercs - Trade Agreement Terminated
country_event = {
	id = mercguardian.156
	title = fmerc_enclave.name
	desc = fmerc_enclave.156.desc
	is_triggered_only = yes
	diplomatic = yes
	custom_gui = "enclave_trader_window"

	picture_event_data = {
		portrait = event_target:traders
		room = enclave_trader_room
	}

	option = {
		name = fmerc_enclave.156.a
		custom_gui = "enclave_trader_option"
	}
}

country_event = {
	id = mercguardian.2000
	hide_window = yes

	# Only triggers once, across savegames, per game.
	# I only use a country_event because event= behaves weirdly.
	# While the initializer has a chance of 100, this event
	# ensures that the enclave is spawned into existing games
	# on load, if the addon was subscribed to after game creation.
	fire_only_once = yes

	immediate = {
		if = {
			limit = {
				NOT = {
					any_system = {
						has_star_flag = "folk_mercenary_system"
					}
				}
			}
			random_system = {
				limit = {
					NOR = {
						exists = space_owner
						has_star_flag = "tiyanki_home_system"
						has_star_flag = "void_system"
						has_star_flag = "primitive_system"
						has_star_flag = "elite_system"
						has_star_flag = "hostile_system"
						has_star_flag = "sanctuary_system"
						has_star_flag = "pirate_system"
						has_star_flag = "enclave"
						has_star_flag = "guardian"
						has_star_flag = "guardians_wraith_system"
						has_star_flag = "guardians_curators_system"
						has_star_flag = "guardians_traders_system"
						has_star_flag = "guardians_dragon_system"
						has_star_flag = "guardians_stellarite_system"
						has_star_flag = "guardians_stellarite_about_to_spawn"
						has_star_flag = "stellarite_present"
						has_star_flag = "guardians_technosphere_system"
						has_star_flag = "guardians_horror_system"
						has_star_flag = "horror_spawned"
						has_star_flag = "guardians_dreadnought_system"
						has_star_flag = "guardians_hive_system"
						has_star_flag = "guardians_artists_system"
						any_planet = { is_capital = yes }
						any_neighbor_system = { any_planet = { is_capital = yes } }
					}
				}
				save_event_target_as = mercspawnlocation
			}
			if = {
				limit = {
					NOT = {
						exists = event_target:mercspawnlocation
					}
				}
				random_system = {
					limit = {
						NOR = {
							exists = space_owner
							any_planet = { is_capital = yes }
							any_neighbor_system = { any_planet = { is_capital = yes } }
						}
					}
					save_event_target_as = mercspawnlocation
				}
				if = {
					limit = {
						NOT = {
							exists = event_target:mercspawnlocation
						}
					}
					random_rim_system = {
						limit = {
							NOT = {
								exists = space_owner
							}
						}
						save_event_target_as = mercspawnlocation
					}
					if = {
						limit = {
							NOT = {
								exists = event_target:mercspawnlocation
							}
						}
						random_rim_system = {
							save_event_target_as = mercspawnlocation
						}
					}
				}
			}

			event_target:mercspawnlocation = {
				spawn_system = {
					min_distance = 20
					max_distance = 50
					initializer = "folk_merc_init"
				}
			}
		}
	}
}
